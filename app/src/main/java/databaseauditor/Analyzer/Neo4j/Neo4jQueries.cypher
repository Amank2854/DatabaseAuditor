MATCH (r:rental)-[:rented_by]->(c:customer)
RETURN c.customer_id, c.first_name, c.last_name, COUNT(r.rental_id) as total_rentals
ORDER BY total_rentals DESC;

MATCH (p:payment)-[:for]->(r:rental)-[:rented]->(i:inventory)-[:contains]->(f:film)
RETURN f.film_id,f.title,SUM(toInteger(p.amount)) as total_revenue
ORDER By total_revenue DESC;

MATCH (r:rental)-[:rented]->(i:inventory)-[:contains]->(f:film)
MATCH (r)-[:handled_by]->(s:staff)-[:works_at]->(st:store)
MATCH (r)<-[:for]-(p:payment)
RETURN st.store_id, SUM(toInteger(p.amount)) AS total_revenue
  ORDER BY total_revenue DESC;

MATCH (r:rental)-[:rented]->(i:inventory)-[:contains]->(f:film)
MATCH (r)-[:handled_by]->(s:staff_id)-[:works_at]->(st:store)
MATCH (r)<-[:for]-(p:payment)
RETURN s.staff_id, SUM(toInteger(p.amount)) AS total_revenue
  ORDER BY total_revenue DESC;

MATCH (r:rental)-[:rented_by]->(c:customer)
MATCH (r)<-[:for]-(p:payment)
RETURN c.customer_id AS customer_id, c.first_name AS first_name, c.last_name AS last_name, SUM(toInteger(p.amount)) AS total_revenue
  ORDER BY total_revenue DESC;

MATCH (c:customer)<-[:rented_by]-(r:rental)<-[:for]-(p:payment),
      (r)-[:rented_by]->(st:staff)-[:works_at]->(s:store)
WITH c, s, SUM(toInteger(p.amount)) AS total_revenue
RETURN c.customer_id, c.first_name, c.last_name, s.store_id, total_revenue
  ORDER BY total_revenue DESC;

MATCH (f:film)<-[:contains]-(i:inventory)<-[:rented]-(r:rental)
RETURN f.rating, f.language_id, COUNT(*) AS num_rentals
  ORDER BY num_rentals DESC;

MATCH (c:customer)<-[:rented_by]-(r:rental)-[:rented]->(i:inventory)-[:contains]->(f:film)
WITH c.customer_id as customerId, count(r) as rentalCount, f.title as filmTitle
  WHERE rentalCount > 45
RETURN customerId, filmTitle
  ORDER BY customerId, filmTitle;

MATCH (c:customer)<-[:rented_by]-(:rental)-[:for]->(p:payment)
WITH c.customer_id AS customerId, c.first_name AS firstName, c.last_name AS lastName, SUM(toInteger(p.amount)) AS totalSpent
  ORDER BY totalSpent DESC
  LIMIT 10
RETURN customerId, firstName, lastName, totalSpent;

MATCH (c:category)<-[:belongs_to]-(f:film)<-[:contains]-(i:inventory)<-[:rented]-(:rental)<-[:for]-(p:payment)
WITH c.name AS category, SUM(toInteger(p.amount)) AS revenue
  ORDER BY revenue DESC
  LIMIT 5
RETURN category, revenue;

// Top 10 Categories with the Most Number of Films
MATCH (c:category)<-[:belongs_to]-(f:film)
WITH c.name AS category, COUNT(f) AS numFilms
  ORDER BY numFilms DESC
  LIMIT 10
RETURN category, numFilms;

// Number of Customers and Average Payment Amount by Country
MATCH (c:country)<-[:is_in_country]-(:city)<-[:is_in_city]-(a:address)<-[:has_address]-(cu:customer)<-[:done_by]-(p:payment)
WITH c.country AS country, COUNT(DISTINCT cu) AS numCustomers, AVG(toInteger(p.amount)) AS avgPayment
  ORDER BY numCustomers DESC
  LIMIT 10
RETURN country, numCustomers, avgPayment;

// Total Amount generated by Rentals in Each Country
MATCH (c:country)<-[:is_in_country]-(:city)<-[:is_in_city]-(a:address)<-[:has_address]-(cu:customer)<-[:done_by]-(p:payment)-[:for]->(r:rental)
WITH c.country AS country, SUM(toInteger(p.amount)) AS totalRevenue
  ORDER BY totalRevenue DESC
  LIMIT 10
RETURN country, totalRevenue;

//  number of customers who have rented films from more than one city
MATCH (c:customer)<-[:done_by]-(p:payment)-[:received_by]->(r:staff)-[:works_at]->(i:store)-[:has_address]->(f:address)-[is_in_city]->(g:city)
WITH c, COUNT(DISTINCT g.city_id) AS numCity
  WHERE numCity > 1
RETURN c.customer_id, c.first_name, c.last_name, numCity;

// number of customers who have rented films from more than one store
MATCH (c:customer)<-[:done_by]-(p:payment)-[:for]->(r:rental)-[:rented]->(i:inventory)-[:contains]->(f:film)
WITH c, COUNT(DISTINCT i.store_id) AS numStores
  WHERE numStores > 1
RETURN c.customer_id, c.first_name, c.last_name, numStores;

// top 5 cities with the most rental revenue and their respective country names
MATCH (c:country)<-[:is_in_country]-(:city)<-[:is_in_city]-(a:address)<-[:has_address]-(cu:customer)<-[:done_by]-(p:payment)-[:for]->(r:rental)
WITH c.country AS country, a.city AS city, SUM(toInteger(p.amount)) AS totalRevenue
  ORDER BY totalRevenue DESC
  LIMIT 5
RETURN country, city, totalRevenue;

// customers who have rented the most number of films in each city
MATCH (c:customer)<-[:done_by]-(p:payment)-[:for]->(r:rental)-[:rented]->(i:inventory)-[:contains]->(f:film)
WITH c, i.store_id AS storeId, COUNT(f) AS numFilms
  ORDER BY numFilms DESC
RETURN c.customer_id, c.first_name, c.last_name, storeId, numFilms;

// films that have been rented for the most number of times in each category
MATCH (c:category)<-[:belongs_to]-(f:film)<-[:contains]-(i:inventory)<-[:rented]-(r:rental)
WITH c.name AS category, f.title AS title, COUNT(r) AS numRentals
  ORDER BY numRentals DESC
RETURN category, title, numRentals;

// Set the replacement_cost to 0 for all DVDs that have been rented more than 20 times
MATCH (f:film)<-[:contains]-(i:inventory)<-[:rented]-(r:rental)
WITH f, COUNT(r) AS numRentals
  WHERE numRentals > 20
SET f.replacement_cost = "0";

// Increase rental rate of all Films released in 2006 by 50%
MATCH (f:film)
  WHERE f.release_year = "2006"
SET f.rental_rate = toString(toFloat(f.rental_rate) * 1.5);

// Increase the rental rate of films in the 'Action' category by 10%, but only for films that have been rented at least 10 times.
MATCH (c:category)<-[:belongs_to]-(f:film)
  WHERE c.name = 'Action'
WITH f, COUNT(*) AS numRentals
  WHERE numRentals > 10
SET f.rental_rate = toString(toFloat(f.rental_rate) * 1.1);

// Delete all films that have not been rented out even once
MATCH (f:film)
WHERE NOT (f)<-[:contains]-(:inventory)<-[:rented]-(:rental)
DETACH DELETE f;








