MATCH (r:rental)-[:rented_by]->(c:customer)
RETURN c.customer_id, c.first_name, c.last_name, COUNT(r.rental_id) AS total_rentals
 ORDER BY total_rentals DESC;

MATCH (p:payment)-[:for]->(r:rental)-[:rented]->(i:inventory)-[: CONTAINS ]->(f:film)
RETURN f.film_id, f.title, SUM(p.amount) AS total_revenue
 ORDER BY total_revenue DESC;

MATCH (r:Rental)-[:HAS_INVENTORY]->(i:Inventory)-[:HAS_FILM]->(f:Film)
MATCH (r)-[:handled_by]->(s:staff_id)-[:works_at]->(st:store)
MATCH (r)<-[:HAS_PAYMENT]-(p:Payment)
RETURN st.store_id, SUM(p.amount) AS total_revenue
 ORDER BY total_revenue DESC;

MATCH (r:Rental)-[:HAS_INVENTORY]->(i:Inventory)-[:HAS_FILM]->(f:Film)
MATCH (r)-[:handled_by]->(s:staff_id)-[:works_at]->(st:store)
MATCH (r)<-[:HAS_PAYMENT]-(p:Payment)
RETURN s.staff_id, SUM(p.amount) AS total_revenue
 ORDER BY total_revenue DESC;

MATCH (r:Rental)-[:RENTED_BY]->(c:Customer)
MATCH (r)<-[:PAID_FOR]-(p:Payment)
RETURN c.customer_id AS customer_id, c.first_name AS first_name, c.last_name AS last_name, SUM(p.amount) AS total_revenue
 ORDER BY total_revenue DESC;

MATCH (c:Customer)<-[:RENTED]-(r:Rental)<-[:PAID]-(p:Payment),
(r)-[:HAS]->(st:staff)-[:works_at]->(s:store)
WITH c, s, SUM(p.amount) AS total_revenue
RETURN c.customer_id, c.first_name, c.last_name, s.store_id, total_revenue
 ORDER BY total_revenue DESC;

MATCH (f:Film)<-[:HAS]-(i:Inventory)<-[:RENTED]-(r:Rental)
RETURN f.rating, f.language_id, COUNT(*) AS num_rentals
 ORDER BY num_rentals DESC;

MATCH (c:Customer)<-[:RENTS]-(r:Rental)-[:RENTS_OUT]->(i:Inventory)-[:HAS]->(f:Film)
WITH c.customer_id AS customerId, count(r) AS rentalCount, f.title AS filmTitle
WHERE rentalCount > 45
RETURN customerId, filmTitle
 ORDER BY customerId, filmTitle;

MATCH (c:Customer)<-[:RENTED]-(:Rental)-[:HAS_PAYMENT]->(p:Payment)
WITH c.customer_id AS customerId, c.first_name AS firstName, c.last_name AS lastName, SUM(p.amount) AS totalSpent
 ORDER BY totalSpent DESC
LIMIT 10
RETURN customerId, firstName, lastName, totalSpent;

MATCH (c:Category)<-[:IN_CATEGORY]-(f:Film)<-[: CONTAINS ]-(i:inventory)<-[:rented]-(:Rental)<-[:for]-(p:Payment)
WITH c.name AS category, SUM(p.amount) AS revenue
 ORDER BY revenue DESC
LIMIT 5
RETURN category, revenue;

// Top 10 Categories with the Most Number of Films
MATCH (c:Category)<-[:IN_CATEGORY]-(f:Film)
WITH c.name AS category, COUNT(f) AS numFilms
 ORDER BY numFilms DESC
LIMIT 10
RETURN category, numFilms;

// Number of Customers and Average Payment Amount by Country
MATCH (c:Country)<-[:FROM]<-[:city]<-[:is_in_city]-(a:Address)<-[:HAS_ADDRESS]-(cu:Customer)<-[:HAS_CUSTOMER]-(p:Payment)
WITH c.country AS country, COUNT( DISTINCT cu) AS numCustomers, AVG(p.amount) AS avgPayment
 ORDER BY numCustomers DESC
LIMIT 10
RETURN country, numCustomers, avgPayment;

// Total Amount generated by Rentals in Each Country
MATCH (c:Country)<-[:FROM]<-[:city]<-[:is_in_city]-(a:Address)<-[:HAS_ADDRESS]-(cu:Customer)<-[:HAS_CUSTOMER]-(p:Payment)-[:HAS_PAYMENT]->(r:Rental)
WITH c.country AS country, SUM(p.amount) AS totalRevenue
 ORDER BY totalRevenue DESC
LIMIT 10
RETURN country, totalRevenue;

//  number of customers who have rented films from more than one city
MATCH (c:Customer)<-[:HAS_CUSTOMER]-(p:Payment)-[:HAS_PAYMENT]->(r:Rental)-[:HAS_INVENTORY]->(i:Inventory)-[:HAS_FILM]->(f:Film)
WITH c, COUNT( DISTINCT i.store_id) AS numStores
WHERE numStores > 1
RETURN c.customer_id, c.first_name, c.last_name, numStores;

// number of customers who have rented films from more than one store
MATCH (c:Customer)<-[:HAS_CUSTOMER]-(p:Payment)-[:HAS_PAYMENT]->(r:Rental)-[:HAS_INVENTORY]->(i:Inventory)-[:HAS_FILM]->(f:Film)
WITH c, COUNT( DISTINCT i.store_id) AS numStores
WHERE numStores > 1
RETURN c.customer_id, c.first_name, c.last_name, numStores;

// top 5 cities with the most rental revenue and their respective country names
MATCH (c:Country)<-[:FROM]<-[:city]<-[:is_in_city]-(a:Address)<-[:HAS_ADDRESS]-(cu:Customer)<-[:HAS_CUSTOMER]-(p:Payment)-[:HAS_PAYMENT]->(r:Rental)
WITH c.country AS country, a.city AS city, SUM(p.amount) AS totalRevenue
 ORDER BY totalRevenue DESC
LIMIT 5
RETURN country, city, totalRevenue;

// customers who have rented the most number of films in each city
MATCH (c:Customer)<-[:HAS_CUSTOMER]-(p:Payment)-[:HAS_PAYMENT]->(r:Rental)-[:HAS_INVENTORY]->(i:Inventory)-[:HAS_FILM]->(f:Film)
WITH c, i.store_id AS storeId, COUNT(f) AS numFilms
 ORDER BY numFilms DESC
RETURN c.customer_id, c.first_name, c.last_name, storeId, numFilms;
